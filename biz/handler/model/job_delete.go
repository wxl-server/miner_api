// Code generated by hertz generator.

package model

import (
	"context"
	"miner_api/biz/common/Status"
	"miner_api/biz/sal/rpc/miner_core_rpc"

	model "miner_api/biz/model"

	"github.com/bytedance/gopkg/util/logger"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/wxl-server/common/gptr"
	"github.com/wxl-server/idl_gen/kitex_gen/miner_core"
)

// DeleteJob .
// @router /job/delete [POST]
func DeleteJob(ctx context.Context, c *app.RequestContext) {
	NewDeleteJobHandlerHandler(ctx, c).Handle()
}

type DeleteJobHandler struct {
	ctx      context.Context
	hertzCtx *app.RequestContext

	respData *model.DeleteJobData
}

func NewDeleteJobHandlerHandler(ctx context.Context, hertzCtx *app.RequestContext) *DeleteJobHandler {
	return &DeleteJobHandler{
		ctx:      ctx,
		hertzCtx: hertzCtx,
	}
}

func (h *DeleteJobHandler) Handle() {
	ctx := h.ctx
	var req model.DeleteJobReq
	err := h.hertzCtx.BindAndValidate(&req)
	if err != nil {
		h.ReturnResp(Status.RequestParamsInvalid, err)
		return
	}

	token := h.hertzCtx.GetHeader("token")
	resp, err := miner_core_rpc.DeleteJob(ctx, h.HttpReq2RpcReq(&req, token))
	if err != nil {
		logger.CtxErrorf(ctx, "miner_core_rpc.DeleteJob failed, err = %v", err)
		h.ReturnResp(Status.InternalError, err)
		return
	}

	h.respData = h.RpcResp2HttpResp(resp)
	h.ReturnResp(Status.Success, err)
}

func (h *DeleteJobHandler) HttpReq2RpcReq(httpReq *model.DeleteJobReq, token []byte) *miner_core.DeleteJobReq {
	return &miner_core.DeleteJobReq{
		Id:    gptr.Indirect(httpReq.Id),
		Token: string(token),
	}
}
func (h *DeleteJobHandler) RpcResp2HttpResp(rpcResp *miner_core.DeleteJobResp) *model.DeleteJobData {
	return &model.DeleteJobData{}
}

func (h *DeleteJobHandler) ReturnResp(status *Status.Status, err error) {
	if err != nil {
		logger.CtxErrorf(h.ctx, "DeleteJob failed, err = %v", err)
	}
	resp := new(model.DeleteJobResp)
	resp.Code = status.Code()
	resp.Message = status.Message()
	if status.Code() == Status.Success.Code() && err == nil {
		resp.Data = h.respData
	}
	h.hertzCtx.JSON(consts.StatusOK, &resp)
}
