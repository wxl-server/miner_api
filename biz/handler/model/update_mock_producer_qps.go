// Code generated by hertz generator.

package model

import (
	"context"
	"github.com/bytedance/gopkg/util/logger"
	"github.com/wxl-server/idl_gen/kitex_gen/miner_integrate"
	"miner_api/biz/common/Status"
	"miner_api/biz/sal/rpc/miner_integrate_rpc"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	model "miner_api/biz/model"
)

// UpdateMockProducerQps .
// @router /mock_producer_qps/update [POST]
func UpdateMockProducerQps(ctx context.Context, c *app.RequestContext) {
	NewUpdateMockProducerQpsHandler(ctx, c).Handle()
}

type UpdateMockProducerQpsHandler struct {
	ctx      context.Context
	hertzCtx *app.RequestContext

	respData *model.UpdateMockProducerQpsData
}

func NewUpdateMockProducerQpsHandler(ctx context.Context, hertzCtx *app.RequestContext) *UpdateMockProducerQpsHandler {
	return &UpdateMockProducerQpsHandler{
		ctx:      ctx,
		hertzCtx: hertzCtx,
	}
}

func (h *UpdateMockProducerQpsHandler) Handle() {
	ctx := h.ctx
	var req model.UpdateMockProducerQpsReq
	err := h.hertzCtx.BindAndValidate(&req)
	if err != nil {
		h.ReturnResp(Status.RequestParamsInvalid, err)
		return
	}

	rpcResp, err := miner_integrate_rpc.UpdateMockProducerQps(ctx, h.HttpReq2RpcReq(&req))
	if err != nil {
		logger.CtxErrorf(ctx, "miner_integrate_rpc.UpdateMockProducerQps failed, err = %v", err)
		h.ReturnResp(Status.InternalError, err)
		return
	}

	h.respData = h.RpcResp2HttpResp(rpcResp)
	h.ReturnResp(Status.Success, err)
}

func (h *UpdateMockProducerQpsHandler) ReturnResp(status *Status.Status, err error) {
	if err != nil {
		logger.CtxErrorf(h.ctx, "UpdateMockProducerQps failed, err = %v", err)
	}
	resp := new(model.UpdateMockProducerQpsResp)
	resp.Code = status.Code()
	resp.Message = status.Message()
	if status.Code() == Status.Success.Code() && err == nil {
		resp.Data = h.respData
	}
	h.hertzCtx.JSON(consts.StatusOK, &resp)
}

func (h *UpdateMockProducerQpsHandler) HttpReq2RpcReq(httpReq *model.UpdateMockProducerQpsReq) *miner_integrate.UpdateMockProducerQpsReq {
	return &miner_integrate.UpdateMockProducerQpsReq{
		ProductBaseInfoQps:       httpReq.ProductBaseInfoQps,
		ProductShopInfoQps:       httpReq.ProductShopInfoQps,
		ProductLogoModelInfoQps:  httpReq.ProductLogoModelInfoQps,
		ProductImageModelInfoQps: httpReq.ProductImageModelInfoQps,
		SetConsumer:              httpReq.SetConsumer,
		SetProducer:              httpReq.SetProducer,
	}
}

func (h *UpdateMockProducerQpsHandler) RpcResp2HttpResp(rpcResp *miner_integrate.UpdateMockProducerQpsResp) *model.UpdateMockProducerQpsData {
	return &model.UpdateMockProducerQpsData{}
}
