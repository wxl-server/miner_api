// Code generated by hertz generator.

package model

import (
	"context"
	"miner_api/biz/common/Status"
	"miner_api/biz/model"
	"miner_api/biz/sal/rpc/common_user_rpc"

	"github.com/bytedance/gopkg/util/logger"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/wxl-server/idl_gen/kitex_gen/common_user"
)

// UpdatePassword .
// @router /user/password/update [POST]
func UpdatePassword(ctx context.Context, c *app.RequestContext) {
	NewUpdatePasswordHandler(ctx, c).Handle()
}

type UpdatePasswordHandler struct {
	ctx      context.Context
	hertzCtx *app.RequestContext
}

func NewUpdatePasswordHandler(ctx context.Context, hertzCtx *app.RequestContext) *UpdatePasswordHandler {
	return &UpdatePasswordHandler{
		ctx:      ctx,
		hertzCtx: hertzCtx,
	}
}

func (h *UpdatePasswordHandler) Handle() {
	ctx := h.ctx
	var req model.UpdatePasswordReq
	err := h.hertzCtx.BindAndValidate(&req)
	if err != nil {
		h.ReturnResp(Status.RequestParamsInvalid, err)
		return
	}

	_, err = common_user_rpc.UpdatePassword(ctx, h.HttpReq2RpcReq(&req))
	if err != nil {
		logger.CtxErrorf(ctx, "common_user_rpc.UpdatePassword failed, err = %v", err)
		h.ReturnResp(Status.InternalError, err)
		return
	}

	h.ReturnResp(Status.Success, err)
}

func (h *UpdatePasswordHandler) ReturnResp(status *Status.Status, err error) {
	if err != nil {
		logger.CtxErrorf(h.ctx, "update password failed, err = %v", err)
	}
	resp := new(model.UpdatePasswordResp)
	resp.Code = status.Code()
	resp.Message = status.Message()
	h.hertzCtx.JSON(consts.StatusOK, &resp)
}

func (h *UpdatePasswordHandler) HttpReq2RpcReq(httpReq *model.UpdatePasswordReq) *common_user.UpdatePasswordReq {
	return &common_user.UpdatePasswordReq{
		Email:       httpReq.GetEmail(),
		OldPassword: httpReq.GetOldPassword(),
		Password:    httpReq.GetPassword(),
	}
}
