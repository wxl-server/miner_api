// Code generated by hertz generator.

package miner_api

import (
	"context"
	"github.com/bytedance/gopkg/util/logger"
	"github.com/qcq1/common/gptr"
	"github.com/qcq1/common/gslice"
	"github.com/qcq1/common/render"
	"github.com/qcq1/rpc_miner_core/kitex_gen/miner_core"
	"miner_api/biz/common/Status"
	"miner_api/biz/sal/rpc/miner_miner_core"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	miner_api "miner_api/biz/model/miner_api"
)

// QueryJobList .
// @router /job/query/list [POST]
func QueryJobList(ctx context.Context, c *app.RequestContext) {
	NewQueryJobListHandler(ctx, c).Handle()
}

type QueryJobListHandler struct {
	ctx      context.Context
	hertzCtx *app.RequestContext

	respData *miner_api.QueryJobListData
}

func NewQueryJobListHandler(ctx context.Context, hertzCtx *app.RequestContext) *QueryJobListHandler {
	return &QueryJobListHandler{
		ctx:      ctx,
		hertzCtx: hertzCtx,
	}
}

func (h *QueryJobListHandler) Handle() {
	ctx := h.ctx
	var req miner_api.QueryJobListReq
	err := h.hertzCtx.BindAndValidate(&req)
	if err != nil {
		h.hertzCtx.String(consts.StatusBadRequest, err.Error())
		return
	}

	coreResp, err := miner_miner_core.RawCall.QueryJobList(ctx, h.HttpReq2RpcReq(gptr.Of(req)))
	if err != nil {
		logger.CtxErrorf(ctx, "miner_miner_core.RawCall.GetItem failed, err = %v", err)
		return
	}

	h.respData = h.RpcResp2HttpResp(coreResp)
	h.ReturnResp(Status.Success, err)
}

func (h *QueryJobListHandler) ReturnResp(status *Status.Status, err error) {
	if err != nil {
		logger.CtxErrorf(h.ctx, "Hello failed, err = %v", err)
	}
	resp := new(miner_api.QueryJobListResp)
	resp.Code = status.Code()
	resp.Message = status.Message()
	if status.Code() == Status.Success.Code() && err == nil {
		resp.Data = h.respData
	}
	logger.CtxInfof(h.ctx, "Hello, resp = %v", render.Render(resp))
	h.hertzCtx.JSON(consts.StatusOK, &resp)
}

func (h *QueryJobListHandler) HttpReq2RpcReq(httpReq *miner_api.QueryJobListReq) *miner_core.QueryJobListReq {
	return &miner_core.QueryJobListReq{
		PageNum:  httpReq.PageNum,
		PageSize: httpReq.PageSize,
		OrderBy:  (*miner_core.JobColumn)(httpReq.OrderBy),
		Order:    (*miner_core.Order)(httpReq.Order),

		Id:             httpReq.ID,
		CreatedBy:      httpReq.CreatedBy,
		CreatedAtStart: httpReq.CreatedAtStart,
		CreatedAtEnd:   httpReq.CreatedAtEnd,
	}
}

func (h *QueryJobListHandler) RpcResp2HttpResp(rpcResp *miner_core.QueryJobListResp) *miner_api.QueryJobListData {
	return &miner_api.QueryJobListData{
		JobList: gslice.Map(rpcResp.JobList, func(v *miner_core.Job) *miner_api.Job {
			return &miner_api.Job{
				ID:          v.Id,
				Name:        v.Name,
				Description: v.Description,
				CreatedBy:   v.CreatedBy,
				UpdatedBy:   v.UpdatedBy,
				CreatedAt:   v.CreatedAt,
				UpdatedAt:   v.UpdatedAt,
				Extra:       v.Extra,
			}
		}),
		Total: rpcResp.Total,
	}
}
